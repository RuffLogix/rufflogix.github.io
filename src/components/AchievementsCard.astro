---
import { achievements } from "../constants/techstack.constant";
---

<div
  class="bg-gray-800 border border-gray-700 rounded-lg p-6 shadow-lg hover:shadow-xl transition-shadow"
  data-animation="achievements-card"
>
  <!-- Scrollable Achievements Container -->
  <div class="achievements-container">
    <div class="achievements-scroll space-y-4">
      {
        achievements.map((achievement, index) => (
          <div
            class="achievement-item flex items-start gap-4 p-4 bg-gradient-to-r from-gray-700/50 to-gray-600/30 rounded-lg border border-gray-600/50 hover:border-emerald-500/50 transition-all duration-300 group"
            style={`animation-delay: ${index * 0.1}s`}
          >
            <div class="flex-shrink-0">
              <span
                class="text-3xl block group-hover:scale-110 transition-transform duration-300"
                role="img"
                aria-label="achievement"
              >
                {achievement.emoji}
              </span>
              {achievement.year && (
                <span class="text-xs text-emerald-400 font-medium mt-1 block text-center">
                  {achievement.year}
                </span>
              )}
            </div>

            <div class="flex-1 min-w-0">
              <div class="flex items-start justify-between mb-2">
                <h4 class="font-semibold text-white group-hover:text-emerald-300 transition-colors line-clamp-2">
                  {achievement.title}
                </h4>
                {achievement.link && (
                  <a
                    href={achievement.link}
                    target="_blank"
                    rel="noopener noreferrer"
                    class="flex-shrink-0 ml-2 text-gray-400 hover:text-emerald-400 transition-colors"
                    aria-label={`Learn more about ${achievement.title}`}
                  >
                    <svg
                      class="w-4 h-4"
                      fill="none"
                      stroke="currentColor"
                      viewBox="0 0 24 24"
                    >
                      <path
                        stroke-linecap="round"
                        stroke-linejoin="round"
                        stroke-width="2"
                        d="M10 6H6a2 2 0 00-2 2v10a2 2 0 002 2h10a2 2 0 002-2v-4M14 4h6m0 0v6m0-6L10 14"
                      />
                    </svg>
                  </a>
                )}
              </div>
              <p class="text-sm text-gray-300 leading-relaxed line-clamp-3">
                {achievement.description}
              </p>
            </div>
          </div>
        ))
      }
    </div>

    <!-- Key Strengths -->
    <div class="mt-8 pt-6 border-t border-gray-600">
      <h4 class="text-lg font-semibold text-emerald-400 mb-4 text-center">
        Key Strengths
      </h4>
      <div class="flex flex-wrap justify-center gap-2">
        {
          [
            "Problem Solving",
            "Algorithm Design",
            "Full-Stack Development",
            "Machine Learning",
            "Team Leadership",
            "Research & Development",
          ].map((skill) => (
            <span class="px-3 py-1 bg-emerald-600/20 text-emerald-300 rounded-full text-sm font-medium hover:bg-emerald-600/30 transition-colors cursor-default">
              {skill}
            </span>
          ))
        }
      </div>
    </div>
  </div>

  <style>
    .achievements-container {
      position: relative;
    }

    .achievements-scroll {
      max-height: 400px;
      overflow-y: auto;
      scrollbar-width: thin;
      scrollbar-color: rgba(16, 185, 129, 0.3) rgba(55, 65, 81, 0.1);
      padding-right: 8px;
    }

    .achievements-scroll::-webkit-scrollbar {
      width: 6px;
    }

    .achievements-scroll::-webkit-scrollbar-track {
      background: rgba(55, 65, 81, 0.1);
      border-radius: 3px;
    }

    .achievements-scroll::-webkit-scrollbar-thumb {
      background: rgba(16, 185, 129, 0.3);
      border-radius: 3px;
    }

    .achievements-scroll::-webkit-scrollbar-thumb:hover {
      background: rgba(16, 185, 129, 0.5);
    }

    .achievement-item {
      position: relative;
      overflow: hidden;
    }

    .achievement-item::before {
      content: "";
      position: absolute;
      top: 0;
      left: -100%;
      width: 100%;
      height: 100%;
      background: linear-gradient(
        90deg,
        transparent,
        rgba(16, 185, 129, 0.1),
        transparent
      );
      transition: left 0.6s ease;
    }

    .achievement-item:hover::before {
      left: 100%;
    }

    /* Line clamp utilities for text truncation */
    .line-clamp-2 {
      display: -webkit-box;
      -webkit-line-clamp: 2;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    .line-clamp-3 {
      display: -webkit-box;
      -webkit-line-clamp: 3;
      -webkit-box-orient: vertical;
      overflow: hidden;
    }

    /* Smooth scroll behavior */
    .achievements-scroll {
      scroll-behavior: smooth;
    }

    /* Focus styles for accessibility */
    .achievement-item:focus-within {
      outline: 2px solid rgba(16, 185, 129, 0.6);
      outline-offset: 2px;
    }

    /* Responsive adjustments */
    @media (max-width: 768px) {
      .achievements-scroll {
        max-height: 350px;
        padding-right: 4px;
      }

      .achievement-item {
        padding: 1rem;
      }
    }

    /* Animation for achievement items */
    .achievement-item {
      opacity: 0;
      transform: translateY(20px);
      animation: slideInUp 0.6s ease forwards;
    }

    @keyframes slideInUp {
      to {
        opacity: 1;
        transform: translateY(0);
      }
    }
  </style>

  <script>
    document.addEventListener("DOMContentLoaded", () => {
      const scrollContainer = document.querySelector(".achievements-scroll");
      const indicators = document.querySelectorAll(".scroll-indicator .w-2");

      if (scrollContainer && indicators.length > 0) {
        const updateScrollIndicators = () => {
          const scrollTop = scrollContainer.scrollTop;
          const scrollHeight =
            scrollContainer.scrollHeight - scrollContainer.clientHeight;
          const scrollPercentage =
            scrollHeight > 0 ? scrollTop / scrollHeight : 0;

          // Reset all indicators
          indicators.forEach((indicator) => {
            indicator.classList.remove("bg-emerald-400", "opacity-60");
            indicator.classList.add("bg-gray-600");
          });

          // Activate indicators based on scroll position
          if (scrollPercentage < 0.33) {
            indicators[0]?.classList.remove("bg-gray-600");
            indicators[0]?.classList.add("bg-emerald-400", "opacity-60");
          } else if (scrollPercentage < 0.66) {
            indicators[1]?.classList.remove("bg-gray-600");
            indicators[1]?.classList.add("bg-emerald-400", "opacity-60");
          } else {
            indicators[2]?.classList.remove("bg-gray-600");
            indicators[2]?.classList.add("bg-emerald-400", "opacity-60");
          }
        };

        // Update indicators on scroll
        scrollContainer.addEventListener("scroll", updateScrollIndicators);

        // Initial update
        updateScrollIndicators();
      }
    });
  </script>
</div>
