name: Deploy Astro to GitHub Pages

on:
  # Runs on pushes targeting the default branch
  push:
    branches: ["master"]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

env:
  BUILD_PATH: "." # default value when not using subfolders

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: latest

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: "20"
          cache: pnpm
          cache-dependency-path: ${{ env.BUILD_PATH }}/pnpm-lock.yaml

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        working-directory: ${{ env.BUILD_PATH }}

      - name: Build with Astro
        run: |
          pnpm run build \
            --site "${{ steps.pages.outputs.origin }}" \
            --base "${{ steps.pages.outputs.base_path }}"
        working-directory: ${{ env.BUILD_PATH }}
        env:
          # Add build timestamp for cache busting
          BUILD_TIMESTAMP: ${{ github.run_number }}-${{ github.sha }}

      - name: Add cache busting headers
        run: |
          # Create _headers file for Netlify-style headers (GitHub Pages supports some)
          echo "/*" > ${{ env.BUILD_PATH }}/dist/_headers
          echo "  Cache-Control: no-cache, no-store, must-revalidate" >> ${{ env.BUILD_PATH }}/dist/_headers
          echo "  Pragma: no-cache" >> ${{ env.BUILD_PATH }}/dist/_headers
          echo "  Expires: 0" >> ${{ env.BUILD_PATH }}/dist/_headers

          # Add meta tag to HTML files for cache busting
          find ${{ env.BUILD_PATH }}/dist -name "*.html" -exec sed -i 's/<head>/<head><meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"><meta http-equiv="Pragma" content="no-cache"><meta http-equiv="Expires" content="0">/g' {} \;

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: ${{ env.BUILD_PATH }}/dist

  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    needs: build
    runs-on: ubuntu-latest
    name: Deploy
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
